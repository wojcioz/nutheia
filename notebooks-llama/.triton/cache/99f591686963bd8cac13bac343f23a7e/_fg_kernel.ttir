module {
  tt.func public @_fg_kernel_0d1d2d3d(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1024xf32>
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1024xf32>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1024xbf16>
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32>
    %3 = tt.splat %1 : (i32) -> tensor<1024xi32>
    %4 = arith.addi %3, %2 : tensor<1024xi32>
    %5 = tt.splat %arg3 : (i32) -> tensor<1024xi32>
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<bf16>) -> tensor<1024x!tt.ptr<bf16>>
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<bf16>>, tensor<1024xi32>
    %9 = tt.load %8, %6, %cst_1 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16>
    %10 = arith.extf %9 : tensor<1024xbf16> to tensor<1024xf32>
    %11 = tt.splat %arg1 : (!tt.ptr<bf16>) -> tensor<1024x!tt.ptr<bf16>>
    %12 = tt.addptr %11, %4 : tensor<1024x!tt.ptr<bf16>>, tensor<1024xi32>
    %13 = tt.load %12, %6, %cst_1 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16>
    %14 = arith.subf %cst, %10 : tensor<1024xf32>
    %15 = math.exp %14 : tensor<1024xf32>
    %16 = arith.addf %15, %cst_0 : tensor<1024xf32>
    %17 = arith.divf %cst_0, %16 : tensor<1024xf32>
    %18 = arith.mulf %10, %17 : tensor<1024xf32>
    %19 = arith.truncf %18 : tensor<1024xf32> to tensor<1024xbf16>
    %20 = arith.mulf %19, %13 : tensor<1024xbf16>
    %21 = tt.splat %arg2 : (!tt.ptr<bf16>) -> tensor<1024x!tt.ptr<bf16>>
    %22 = tt.addptr %21, %4 : tensor<1024x!tt.ptr<bf16>>, tensor<1024xi32>
    tt.store %22, %20, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xbf16>
    tt.return
  }
}
