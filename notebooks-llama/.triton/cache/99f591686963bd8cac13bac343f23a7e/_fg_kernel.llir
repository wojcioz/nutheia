; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @_fg_kernel_0d1d2d3d(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !5 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %6 = shl i32 %5, 3, !dbg !8
  %7 = and i32 %6, 1016, !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 10, !dbg !10
  %10 = or i32 %7, %9, !dbg !11
  %11 = icmp slt i32 %10, %3, !dbg !12
  %12 = sext i32 %10 to i64, !dbg !13
  %13 = getelementptr i16, ptr addrspace(1) %0, i64 %12, !dbg !13
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #1, !dbg !14
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !14
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !14
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !14
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !14
  %19 = trunc i32 %15 to i16, !dbg !14
  %extelt.offset = lshr i32 %15, 16, !dbg !14
  %20 = trunc i32 %extelt.offset to i16, !dbg !14
  %21 = trunc i32 %16 to i16, !dbg !14
  %extelt.offset1 = lshr i32 %16, 16, !dbg !14
  %22 = trunc i32 %extelt.offset1 to i16, !dbg !14
  %23 = trunc i32 %17 to i16, !dbg !14
  %extelt.offset2 = lshr i32 %17, 16, !dbg !14
  %24 = trunc i32 %extelt.offset2 to i16, !dbg !14
  %25 = trunc i32 %18 to i16, !dbg !14
  %extelt.offset3 = lshr i32 %18, 16, !dbg !14
  %26 = trunc i32 %extelt.offset3 to i16, !dbg !14
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #1, !dbg !15
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #1, !dbg !15
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #1, !dbg !15
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #1, !dbg !15
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !15
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #1, !dbg !15
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #1, !dbg !15
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !15
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %12, !dbg !16
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #1, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !17
  %41 = trunc i32 %37 to i16, !dbg !17
  %extelt.offset4 = lshr i32 %37, 16, !dbg !17
  %42 = trunc i32 %extelt.offset4 to i16, !dbg !17
  %43 = trunc i32 %38 to i16, !dbg !17
  %extelt.offset5 = lshr i32 %38, 16, !dbg !17
  %44 = trunc i32 %extelt.offset5 to i16, !dbg !17
  %45 = trunc i32 %39 to i16, !dbg !17
  %extelt.offset6 = lshr i32 %39, 16, !dbg !17
  %46 = trunc i32 %extelt.offset6 to i16, !dbg !17
  %47 = trunc i32 %40 to i16, !dbg !17
  %extelt.offset7 = lshr i32 %40, 16, !dbg !17
  %48 = trunc i32 %extelt.offset7 to i16, !dbg !17
  %49 = fsub float 0.000000e+00, %27, !dbg !18
  %50 = fsub float 0.000000e+00, %28, !dbg !18
  %51 = fsub float 0.000000e+00, %29, !dbg !18
  %52 = fsub float 0.000000e+00, %30, !dbg !18
  %53 = fsub float 0.000000e+00, %31, !dbg !18
  %54 = fsub float 0.000000e+00, %32, !dbg !18
  %55 = fsub float 0.000000e+00, %33, !dbg !18
  %56 = fsub float 0.000000e+00, %34, !dbg !18
  %57 = fmul float %49, 0x3FF7154760000000, !dbg !22
  %58 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %57) #1, !dbg !22
  %59 = fmul float %50, 0x3FF7154760000000, !dbg !22
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #1, !dbg !22
  %61 = fmul float %51, 0x3FF7154760000000, !dbg !22
  %62 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %61) #1, !dbg !22
  %63 = fmul float %52, 0x3FF7154760000000, !dbg !22
  %64 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %63) #1, !dbg !22
  %65 = fmul float %53, 0x3FF7154760000000, !dbg !22
  %66 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %65) #1, !dbg !22
  %67 = fmul float %54, 0x3FF7154760000000, !dbg !22
  %68 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %67) #1, !dbg !22
  %69 = fmul float %55, 0x3FF7154760000000, !dbg !22
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #1, !dbg !22
  %71 = fmul float %56, 0x3FF7154760000000, !dbg !22
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #1, !dbg !22
  %73 = fadd float %58, 1.000000e+00, !dbg !23
  %74 = fadd float %60, 1.000000e+00, !dbg !23
  %75 = fadd float %62, 1.000000e+00, !dbg !23
  %76 = fadd float %64, 1.000000e+00, !dbg !23
  %77 = fadd float %66, 1.000000e+00, !dbg !23
  %78 = fadd float %68, 1.000000e+00, !dbg !23
  %79 = fadd float %70, 1.000000e+00, !dbg !23
  %80 = fadd float %72, 1.000000e+00, !dbg !23
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %73) #1, !dbg !24
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %74) #1, !dbg !24
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %75) #1, !dbg !24
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %76) #1, !dbg !24
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %77) #1, !dbg !24
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %78) #1, !dbg !24
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %79) #1, !dbg !24
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %80) #1, !dbg !24
  %89 = fmul float %27, %81, !dbg !25
  %90 = fmul float %28, %82, !dbg !25
  %91 = fmul float %29, %83, !dbg !25
  %92 = fmul float %30, %84, !dbg !25
  %93 = fmul float %31, %85, !dbg !25
  %94 = fmul float %32, %86, !dbg !25
  %95 = fmul float %33, %87, !dbg !25
  %96 = fmul float %34, %88, !dbg !25
  %97 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %89) #1, !dbg !26
  %98 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %90) #1, !dbg !26
  %99 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %91) #1, !dbg !26
  %100 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %92) #1, !dbg !26
  %101 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %93) #1, !dbg !26
  %102 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %94) #1, !dbg !26
  %103 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %95) #1, !dbg !26
  %104 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %96) #1, !dbg !26
  %105 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %97, i16 %41) #1, !dbg !27
  %106 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %98, i16 %42) #1, !dbg !27
  %107 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %99, i16 %43) #1, !dbg !27
  %108 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %100, i16 %44) #1, !dbg !27
  %109 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %101, i16 %45) #1, !dbg !27
  %110 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %102, i16 %46) #1, !dbg !27
  %111 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %103, i16 %47) #1, !dbg !27
  %112 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %104, i16 %48) #1, !dbg !27
  %113 = getelementptr i16, ptr addrspace(1) %2, i64 %12, !dbg !28
  %114 = insertelement <2 x i16> undef, i16 %105, i64 0, !dbg !29
  %115 = insertelement <2 x i16> %114, i16 %106, i64 1, !dbg !29
  %116 = bitcast <2 x i16> %115 to i32, !dbg !29
  %117 = insertelement <2 x i16> undef, i16 %107, i64 0, !dbg !29
  %118 = insertelement <2 x i16> %117, i16 %108, i64 1, !dbg !29
  %119 = bitcast <2 x i16> %118 to i32, !dbg !29
  %120 = insertelement <2 x i16> undef, i16 %109, i64 0, !dbg !29
  %121 = insertelement <2 x i16> %120, i16 %110, i64 1, !dbg !29
  %122 = bitcast <2 x i16> %121 to i32, !dbg !29
  %123 = insertelement <2 x i16> undef, i16 %111, i64 0, !dbg !29
  %124 = insertelement <2 x i16> %123, i16 %112, i64 1, !dbg !29
  %125 = bitcast <2 x i16> %124 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %116, i32 %119, i32 %122, i32 %125, ptr addrspace(1) %113, i1 %11) #1, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "swiglu.py", directory: "/opt/conda/lib/python3.11/site-packages/unsloth/kernels")
!3 = !{ptr @_fg_kernel_0d1d2d3d, !"kernel", i32 1}
!4 = !{ptr @_fg_kernel_0d1d2d3d, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "_fg_kernel_0d1d2d3d", linkageName: "_fg_kernel_0d1d2d3d", scope: !2, file: !2, line: 22, type: !6, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 50, scope: !5)
!9 = !DILocation(line: 23, column: 30, scope: !5)
!10 = !DILocation(line: 24, column: 24, scope: !5)
!11 = !DILocation(line: 24, column: 37, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 27, column: 24, scope: !5)
!14 = !DILocation(line: 27, column: 20, scope: !5)
!15 = !DILocation(line: 27, column: 60, scope: !5)
!16 = !DILocation(line: 28, column: 24, scope: !5)
!17 = !DILocation(line: 28, column: 20, scope: !5)
!18 = !DILocation(line: 27, column: 30, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !5, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/opt/conda/lib/python3.11/site-packages/triton/language")
!21 = !DILocation(line: 31, column: 31, scope: !19)
!22 = !DILocation(line: 27, column: 29, scope: !19, inlinedAt: !21)
!23 = !DILocation(line: 27, column: 20, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 27, column: 16, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 31, column: 20, scope: !5)
!26 = !DILocation(line: 32, column: 21, scope: !5)
!27 = !DILocation(line: 34, column: 20, scope: !5)
!28 = !DILocation(line: 37, column: 17, scope: !5)
!29 = !DILocation(line: 37, column: 26, scope: !5)
!30 = !DILocation(line: 37, column: 4, scope: !5)
