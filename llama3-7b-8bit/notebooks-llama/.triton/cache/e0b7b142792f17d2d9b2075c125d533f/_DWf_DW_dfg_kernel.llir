; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @_DWf_DW_dfg_kernel_0d1d2d3d(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !5 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %6 = shl i32 %5, 3, !dbg !8
  %7 = and i32 %6, 1016, !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 10, !dbg !10
  %10 = or i32 %7, %9, !dbg !11
  %11 = icmp slt i32 %10, %3, !dbg !12
  %12 = sext i32 %10 to i64, !dbg !13
  %13 = getelementptr i16, ptr addrspace(1) %0, i64 %12, !dbg !13
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #1, !dbg !14
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !14
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !14
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !14
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !14
  %19 = trunc i32 %15 to i16, !dbg !14
  %extelt.offset = lshr i32 %15, 16, !dbg !14
  %20 = trunc i32 %extelt.offset to i16, !dbg !14
  %21 = trunc i32 %16 to i16, !dbg !14
  %extelt.offset1 = lshr i32 %16, 16, !dbg !14
  %22 = trunc i32 %extelt.offset1 to i16, !dbg !14
  %23 = trunc i32 %17 to i16, !dbg !14
  %extelt.offset2 = lshr i32 %17, 16, !dbg !14
  %24 = trunc i32 %extelt.offset2 to i16, !dbg !14
  %25 = trunc i32 %18 to i16, !dbg !14
  %extelt.offset3 = lshr i32 %18, 16, !dbg !14
  %26 = trunc i32 %extelt.offset3 to i16, !dbg !14
  %27 = getelementptr i16, ptr addrspace(1) %1, i64 %12, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #1, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %33 = trunc i32 %29 to i16, !dbg !16
  %extelt.offset4 = lshr i32 %29, 16, !dbg !16
  %34 = trunc i32 %extelt.offset4 to i16, !dbg !16
  %35 = trunc i32 %30 to i16, !dbg !16
  %extelt.offset5 = lshr i32 %30, 16, !dbg !16
  %36 = trunc i32 %extelt.offset5 to i16, !dbg !16
  %37 = trunc i32 %31 to i16, !dbg !16
  %extelt.offset6 = lshr i32 %31, 16, !dbg !16
  %38 = trunc i32 %extelt.offset6 to i16, !dbg !16
  %39 = trunc i32 %32 to i16, !dbg !16
  %extelt.offset7 = lshr i32 %32, 16, !dbg !16
  %40 = trunc i32 %extelt.offset7 to i16, !dbg !16
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #1, !dbg !17
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #1, !dbg !17
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #1, !dbg !17
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #1, !dbg !17
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #1, !dbg !17
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #1, !dbg !17
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #1, !dbg !17
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #1, !dbg !17
  %49 = getelementptr i16, ptr addrspace(1) %2, i64 %12, !dbg !18
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #1, !dbg !19
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !19
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !19
  %55 = trunc i32 %51 to i16, !dbg !19
  %extelt.offset8 = lshr i32 %51, 16, !dbg !19
  %56 = trunc i32 %extelt.offset8 to i16, !dbg !19
  %57 = trunc i32 %52 to i16, !dbg !19
  %extelt.offset9 = lshr i32 %52, 16, !dbg !19
  %58 = trunc i32 %extelt.offset9 to i16, !dbg !19
  %59 = trunc i32 %53 to i16, !dbg !19
  %extelt.offset10 = lshr i32 %53, 16, !dbg !19
  %60 = trunc i32 %extelt.offset10 to i16, !dbg !19
  %61 = trunc i32 %54 to i16, !dbg !19
  %extelt.offset11 = lshr i32 %54, 16, !dbg !19
  %62 = trunc i32 %extelt.offset11 to i16, !dbg !19
  %63 = fsub float 0.000000e+00, %41, !dbg !20
  %64 = fsub float 0.000000e+00, %42, !dbg !20
  %65 = fsub float 0.000000e+00, %43, !dbg !20
  %66 = fsub float 0.000000e+00, %44, !dbg !20
  %67 = fsub float 0.000000e+00, %45, !dbg !20
  %68 = fsub float 0.000000e+00, %46, !dbg !20
  %69 = fsub float 0.000000e+00, %47, !dbg !20
  %70 = fsub float 0.000000e+00, %48, !dbg !20
  %71 = fmul float %63, 0x3FF7154760000000, !dbg !24
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #1, !dbg !24
  %73 = fmul float %64, 0x3FF7154760000000, !dbg !24
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #1, !dbg !24
  %75 = fmul float %65, 0x3FF7154760000000, !dbg !24
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !24
  %77 = fmul float %66, 0x3FF7154760000000, !dbg !24
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #1, !dbg !24
  %79 = fmul float %67, 0x3FF7154760000000, !dbg !24
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #1, !dbg !24
  %81 = fmul float %68, 0x3FF7154760000000, !dbg !24
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #1, !dbg !24
  %83 = fmul float %69, 0x3FF7154760000000, !dbg !24
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !24
  %85 = fmul float %70, 0x3FF7154760000000, !dbg !24
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !24
  %87 = fadd float %72, 1.000000e+00, !dbg !25
  %88 = fadd float %74, 1.000000e+00, !dbg !25
  %89 = fadd float %76, 1.000000e+00, !dbg !25
  %90 = fadd float %78, 1.000000e+00, !dbg !25
  %91 = fadd float %80, 1.000000e+00, !dbg !25
  %92 = fadd float %82, 1.000000e+00, !dbg !25
  %93 = fadd float %84, 1.000000e+00, !dbg !25
  %94 = fadd float %86, 1.000000e+00, !dbg !25
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %87) #1, !dbg !26
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %88) #1, !dbg !26
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %89) #1, !dbg !26
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %90) #1, !dbg !26
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #1, !dbg !26
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #1, !dbg !26
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !26
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !26
  %103 = fmul float %41, %95, !dbg !27
  %104 = fmul float %42, %96, !dbg !27
  %105 = fmul float %43, %97, !dbg !27
  %106 = fmul float %44, %98, !dbg !27
  %107 = fmul float %45, %99, !dbg !27
  %108 = fmul float %46, %100, !dbg !27
  %109 = fmul float %47, %101, !dbg !27
  %110 = fmul float %48, %102, !dbg !27
  %111 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %103) #1, !dbg !28
  %112 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %104) #1, !dbg !28
  %113 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %105) #1, !dbg !28
  %114 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %106) #1, !dbg !28
  %115 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %107) #1, !dbg !28
  %116 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %108) #1, !dbg !28
  %117 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %109) #1, !dbg !28
  %118 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %110) #1, !dbg !28
  %119 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %111, i16 %55) #1, !dbg !29
  %120 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %112, i16 %56) #1, !dbg !29
  %121 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %113, i16 %57) #1, !dbg !29
  %122 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %114, i16 %58) #1, !dbg !29
  %123 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %115, i16 %59) #1, !dbg !29
  %124 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %116, i16 %60) #1, !dbg !29
  %125 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %117, i16 %61) #1, !dbg !29
  %126 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %118, i16 %62) #1, !dbg !29
  %127 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %19, i16 %111) #1, !dbg !30
  %128 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %20, i16 %112) #1, !dbg !30
  %129 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %21, i16 %113) #1, !dbg !30
  %130 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %22, i16 %114) #1, !dbg !30
  %131 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %23, i16 %115) #1, !dbg !30
  %132 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %24, i16 %116) #1, !dbg !30
  %133 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %25, i16 %117) #1, !dbg !30
  %134 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %26, i16 %118) #1, !dbg !30
  %135 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %19, i16 %55) #1, !dbg !31
  %136 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %20, i16 %56) #1, !dbg !31
  %137 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %21, i16 %57) #1, !dbg !31
  %138 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %22, i16 %58) #1, !dbg !31
  %139 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %23, i16 %59) #1, !dbg !31
  %140 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %24, i16 %60) #1, !dbg !31
  %141 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %25, i16 %61) #1, !dbg !31
  %142 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %26, i16 %62) #1, !dbg !31
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %135) #1, !dbg !32
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %136) #1, !dbg !32
  %145 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %137) #1, !dbg !32
  %146 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #1, !dbg !32
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #1, !dbg !32
  %148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #1, !dbg !32
  %149 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #1, !dbg !32
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %142) #1, !dbg !32
  %151 = fmul float %95, %143, !dbg !33
  %152 = fmul float %96, %144, !dbg !33
  %153 = fmul float %97, %145, !dbg !33
  %154 = fmul float %98, %146, !dbg !33
  %155 = fmul float %99, %147, !dbg !33
  %156 = fmul float %100, %148, !dbg !33
  %157 = fmul float %101, %149, !dbg !33
  %158 = fmul float %102, %150, !dbg !33
  %159 = fsub float 1.000000e+00, %95, !dbg !34
  %160 = fsub float 1.000000e+00, %96, !dbg !34
  %161 = fsub float 1.000000e+00, %97, !dbg !34
  %162 = fsub float 1.000000e+00, %98, !dbg !34
  %163 = fsub float 1.000000e+00, %99, !dbg !34
  %164 = fsub float 1.000000e+00, %100, !dbg !34
  %165 = fsub float 1.000000e+00, %101, !dbg !34
  %166 = fsub float 1.000000e+00, %102, !dbg !34
  %167 = fmul float %41, %159, !dbg !35
  %168 = fmul float %42, %160, !dbg !35
  %169 = fmul float %43, %161, !dbg !35
  %170 = fmul float %44, %162, !dbg !35
  %171 = fmul float %45, %163, !dbg !35
  %172 = fmul float %46, %164, !dbg !35
  %173 = fmul float %47, %165, !dbg !35
  %174 = fmul float %48, %166, !dbg !35
  %175 = fadd float %167, 1.000000e+00, !dbg !36
  %176 = fadd float %168, 1.000000e+00, !dbg !36
  %177 = fadd float %169, 1.000000e+00, !dbg !36
  %178 = fadd float %170, 1.000000e+00, !dbg !36
  %179 = fadd float %171, 1.000000e+00, !dbg !36
  %180 = fadd float %172, 1.000000e+00, !dbg !36
  %181 = fadd float %173, 1.000000e+00, !dbg !36
  %182 = fadd float %174, 1.000000e+00, !dbg !36
  %183 = fmul float %175, %151, !dbg !37
  %184 = fmul float %176, %152, !dbg !37
  %185 = fmul float %177, %153, !dbg !37
  %186 = fmul float %178, %154, !dbg !37
  %187 = fmul float %179, %155, !dbg !37
  %188 = fmul float %180, %156, !dbg !37
  %189 = fmul float %181, %157, !dbg !37
  %190 = fmul float %182, %158, !dbg !37
  %191 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %183) #1, !dbg !38
  %192 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %184) #1, !dbg !38
  %193 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %185) #1, !dbg !38
  %194 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %186) #1, !dbg !38
  %195 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %187) #1, !dbg !38
  %196 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %188) #1, !dbg !38
  %197 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %189) #1, !dbg !38
  %198 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %190) #1, !dbg !38
  %199 = insertelement <2 x i16> undef, i16 %119, i64 0, !dbg !39
  %200 = insertelement <2 x i16> %199, i16 %120, i64 1, !dbg !39
  %201 = bitcast <2 x i16> %200 to i32, !dbg !39
  %202 = insertelement <2 x i16> undef, i16 %121, i64 0, !dbg !39
  %203 = insertelement <2 x i16> %202, i16 %122, i64 1, !dbg !39
  %204 = bitcast <2 x i16> %203 to i32, !dbg !39
  %205 = insertelement <2 x i16> undef, i16 %123, i64 0, !dbg !39
  %206 = insertelement <2 x i16> %205, i16 %124, i64 1, !dbg !39
  %207 = bitcast <2 x i16> %206 to i32, !dbg !39
  %208 = insertelement <2 x i16> undef, i16 %125, i64 0, !dbg !39
  %209 = insertelement <2 x i16> %208, i16 %126, i64 1, !dbg !39
  %210 = bitcast <2 x i16> %209 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %204, i32 %207, i32 %210, ptr addrspace(1) %13, i1 %11) #1, !dbg !39
  %211 = insertelement <2 x i16> undef, i16 %127, i64 0, !dbg !40
  %212 = insertelement <2 x i16> %211, i16 %128, i64 1, !dbg !40
  %213 = bitcast <2 x i16> %212 to i32, !dbg !40
  %214 = insertelement <2 x i16> undef, i16 %129, i64 0, !dbg !40
  %215 = insertelement <2 x i16> %214, i16 %130, i64 1, !dbg !40
  %216 = bitcast <2 x i16> %215 to i32, !dbg !40
  %217 = insertelement <2 x i16> undef, i16 %131, i64 0, !dbg !40
  %218 = insertelement <2 x i16> %217, i16 %132, i64 1, !dbg !40
  %219 = bitcast <2 x i16> %218 to i32, !dbg !40
  %220 = insertelement <2 x i16> undef, i16 %133, i64 0, !dbg !40
  %221 = insertelement <2 x i16> %220, i16 %134, i64 1, !dbg !40
  %222 = bitcast <2 x i16> %221 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %213, i32 %216, i32 %219, i32 %222, ptr addrspace(1) %27, i1 %11) #1, !dbg !40
  %223 = insertelement <2 x i16> undef, i16 %191, i64 0, !dbg !41
  %224 = insertelement <2 x i16> %223, i16 %192, i64 1, !dbg !41
  %225 = bitcast <2 x i16> %224 to i32, !dbg !41
  %226 = insertelement <2 x i16> undef, i16 %193, i64 0, !dbg !41
  %227 = insertelement <2 x i16> %226, i16 %194, i64 1, !dbg !41
  %228 = bitcast <2 x i16> %227 to i32, !dbg !41
  %229 = insertelement <2 x i16> undef, i16 %195, i64 0, !dbg !41
  %230 = insertelement <2 x i16> %229, i16 %196, i64 1, !dbg !41
  %231 = bitcast <2 x i16> %230 to i32, !dbg !41
  %232 = insertelement <2 x i16> undef, i16 %197, i64 0, !dbg !41
  %233 = insertelement <2 x i16> %232, i16 %198, i64 1, !dbg !41
  %234 = bitcast <2 x i16> %233 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %225, i32 %228, i32 %231, i32 %234, ptr addrspace(1) %49, i1 %11) #1, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "swiglu.py", directory: "/opt/conda/lib/python3.11/site-packages/unsloth/kernels")
!3 = !{ptr @_DWf_DW_dfg_kernel_0d1d2d3d, !"kernel", i32 1}
!4 = !{ptr @_DWf_DW_dfg_kernel_0d1d2d3d, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "_DWf_DW_dfg_kernel_0d1d2d3d", linkageName: "_DWf_DW_dfg_kernel_0d1d2d3d", scope: !2, file: !2, line: 52, type: !6, scopeLine: 52, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 63, column: 50, scope: !5)
!9 = !DILocation(line: 62, column: 30, scope: !5)
!10 = !DILocation(line: 63, column: 24, scope: !5)
!11 = !DILocation(line: 63, column: 37, scope: !5)
!12 = !DILocation(line: 64, column: 21, scope: !5)
!13 = !DILocation(line: 66, column: 26, scope: !5)
!14 = !DILocation(line: 66, column: 21, scope: !5)
!15 = !DILocation(line: 67, column: 26, scope: !5)
!16 = !DILocation(line: 67, column: 21, scope: !5)
!17 = !DILocation(line: 67, column: 62, scope: !5)
!18 = !DILocation(line: 68, column: 26, scope: !5)
!19 = !DILocation(line: 68, column: 21, scope: !5)
!20 = !DILocation(line: 27, column: 30, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !5, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/opt/conda/lib/python3.11/site-packages/triton/language")
!23 = !DILocation(line: 72, column: 24, scope: !21)
!24 = !DILocation(line: 27, column: 29, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 27, column: 20, scope: !21, inlinedAt: !23)
!26 = !DILocation(line: 27, column: 16, scope: !21, inlinedAt: !23)
!27 = !DILocation(line: 74, column: 21, scope: !5)
!28 = !DILocation(line: 75, column: 21, scope: !5)
!29 = !DILocation(line: 77, column: 22, scope: !5)
!30 = !DILocation(line: 79, column: 22, scope: !5)
!31 = !DILocation(line: 81, column: 22, scope: !5)
!32 = !DILocation(line: 83, column: 23, scope: !5)
!33 = !DILocation(line: 83, column: 37, scope: !5)
!34 = !DILocation(line: 83, column: 68, scope: !5)
!35 = !DILocation(line: 83, column: 62, scope: !5)
!36 = !DILocation(line: 83, column: 53, scope: !5)
!37 = !DILocation(line: 83, column: 47, scope: !5)
!38 = !DILocation(line: 84, column: 23, scope: !5)
!39 = !DILocation(line: 87, column: 27, scope: !5)
!40 = !DILocation(line: 88, column: 27, scope: !5)
!41 = !DILocation(line: 89, column: 27, scope: !5)
!42 = !DILocation(line: 89, column: 4, scope: !5)
