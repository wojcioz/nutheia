#blocked = #triton_gpu.blocked<{sizePerThread = [8], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @_DWf_DW_dfg_kernel_0d1d2d3d(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1024xbf16, #blocked>
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1024xf32, #blocked>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1024xf32, #blocked>
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<1024xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked>
    %5 = tt.splat %arg3 : (i32) -> tensor<1024xi32, #blocked>
    %6 = "triton_gpu.cmpi"(%4, %5) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked>, tensor<1024xi32, #blocked>) -> tensor<1024xi1, #blocked>
    %7 = tt.splat %arg0 : (!tt.ptr<bf16>) -> tensor<1024x!tt.ptr<bf16>, #blocked>
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<bf16>, #blocked>, tensor<1024xi32, #blocked>
    %9 = tt.load %8, %6, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16, #blocked>
    %10 = tt.splat %arg1 : (!tt.ptr<bf16>) -> tensor<1024x!tt.ptr<bf16>, #blocked>
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<bf16>, #blocked>, tensor<1024xi32, #blocked>
    %12 = tt.load %11, %6, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16, #blocked>
    %13 = arith.extf %12 : tensor<1024xbf16, #blocked> to tensor<1024xf32, #blocked>
    %14 = tt.splat %arg2 : (!tt.ptr<bf16>) -> tensor<1024x!tt.ptr<bf16>, #blocked>
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<bf16>, #blocked>, tensor<1024xi32, #blocked>
    %16 = tt.load %15, %6, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xbf16, #blocked>
    %17 = arith.subf %cst_1, %13 : tensor<1024xf32, #blocked>
    %18 = math.exp %17 : tensor<1024xf32, #blocked>
    %19 = arith.addf %18, %cst_0 : tensor<1024xf32, #blocked>
    %20 = arith.divf %cst_0, %19 : tensor<1024xf32, #blocked>
    %21 = arith.mulf %20, %13 : tensor<1024xf32, #blocked>
    %22 = arith.truncf %21 : tensor<1024xf32, #blocked> to tensor<1024xbf16, #blocked>
    %23 = arith.mulf %22, %16 : tensor<1024xbf16, #blocked>
    %24 = arith.mulf %9, %22 : tensor<1024xbf16, #blocked>
    %25 = arith.mulf %9, %16 : tensor<1024xbf16, #blocked>
    %26 = arith.extf %25 : tensor<1024xbf16, #blocked> to tensor<1024xf32, #blocked>
    %27 = arith.mulf %26, %20 : tensor<1024xf32, #blocked>
    %28 = arith.subf %cst_0, %20 : tensor<1024xf32, #blocked>
    %29 = arith.mulf %13, %28 : tensor<1024xf32, #blocked>
    %30 = arith.addf %29, %cst_0 : tensor<1024xf32, #blocked>
    %31 = arith.mulf %27, %30 : tensor<1024xf32, #blocked>
    %32 = arith.truncf %31 : tensor<1024xf32, #blocked> to tensor<1024xbf16, #blocked>
    tt.store %8, %23, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xbf16, #blocked>
    tt.store %11, %24, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xbf16, #blocked>
    tt.store %15, %32, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xbf16, #blocked>
    tt.return
  }
}
